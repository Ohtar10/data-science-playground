{
  "paragraphs": [
    {
      "text": "%md\n# K-Nearest-Neighbors\n\nKNN is a simple concept: define some distance metric between the items in your dataset, and dind the K closets items. You can then use those items to predict some property of a test item, by having them somehow \"vote\" on it.\n\nAs an example, let\u0027s look at the MovieLens data. We\u0027ll try to guess the rating of a movie by looking at the 10 movies that are closest to it in terms of generes and popularity.\n\nTo start, we\u0027ll load up every rating in the dataset into a pandas DataFrame:",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 2:53:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eK-Nearest-Neighbors\u003c/h1\u003e\n\u003cp\u003eKNN is a simple concept: define some distance metric between the items in your dataset, and dind the K closets items. You can then use those items to predict some property of a test item, by having them somehow \u0026ldquo;vote\u0026rdquo; on it.\u003c/p\u003e\n\u003cp\u003eAs an example, let\u0026rsquo;s look at the MovieLens data. We\u0026rsquo;ll try to guess the rating of a movie by looking at the 10 movies that are closest to it in terms of generes and popularity.\u003c/p\u003e\n\u003cp\u003eTo start, we\u0026rsquo;ll load up every rating in the dataset into a pandas DataFrame:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514299863886_-1937625066",
      "id": "20171226-145103_1533947688",
      "dateCreated": "Dec 26, 2017 2:51:03 PM",
      "dateStarted": "Dec 26, 2017 2:53:53 PM",
      "dateFinished": "Dec 26, 2017 2:53:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nimport pandas as pd\n\nr_cols \u003d [\u0027user_id\u0027, \u0027movie_id\u0027, \u0027rating\u0027]\nratings \u003d pd.read_csv(\u0027/zeppelin/datasets/ml-100k/u.data\u0027, sep\u003d\u0027\\t\u0027, names\u003dr_cols, usecols\u003drange(3))\n\nz.show(ratings)\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 2:54:46 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "user_id\tmovie_id\trating\n0\t50\t5\n0\t172\t5\n0\t133\t1\n196\t242\t3\n186\t302\t3\n22\t377\t1\n244\t51\t2\n166\t346\t1\n298\t474\t4\n115\t265\t2\n253\t465\t5\n305\t451\t3\n6\t86\t3\n62\t257\t2\n286\t1014\t5\n200\t222\t5\n210\t40\t3\n224\t29\t3\n303\t785\t3\n122\t387\t5\n194\t274\t2\n291\t1042\t4\n234\t1184\t2\n119\t392\t4\n167\t486\t4\n299\t144\t4\n291\t118\t2\n308\t1\t4\n95\t546\t2\n38\t95\t5\n102\t768\t2\n63\t277\t4\n160\t234\t5\n50\t246\t3\n301\t98\t4\n225\t193\t4\n290\t88\t4\n97\t194\t3\n157\t274\t4\n181\t1081\t1\n278\t603\t5\n276\t796\t1\n7\t32\t4\n10\t16\t4\n284\t304\t4\n201\t979\t2\n276\t564\t3\n287\t327\t5\n246\t201\t5\n242\t1137\t5\n249\t241\t5\n99\t4\t5\n178\t332\t3\n251\t100\t4\n81\t432\t2\n260\t322\t4\n25\t181\t5\n59\t196\t5\n72\t679\t2\n87\t384\t4\n290\t143\t5\n42\t423\t5\n292\t515\t4\n115\t20\t3\n20\t288\t1\n201\t219\t4\n13\t526\t3\n246\t919\t4\n138\t26\t5\n167\t232\t1\n60\t427\t5\n57\t304\t5\n223\t274\t4\n189\t512\t4\n243\t15\t3\n92\t1049\t1\n246\t416\t3\n194\t165\t4\n241\t690\t2\n178\t248\t4\n254\t1444\t3\n293\t5\t3\n127\t229\t5\n225\t237\t5\n299\t229\t3\n225\t480\t5\n276\t54\t3\n291\t144\t5\n222\t366\t4\n267\t518\t5\n42\t403\t3\n11\t111\t4\n95\t625\t4\n8\t338\t4\n162\t25\t4\n87\t1016\t4\n279\t154\t5\n145\t275\t2\n119\t1153\t5\n62\t498\t4\n62\t382\t3\n28\t209\t4\n135\t23\t4\n32\t294\t3\n90\t382\t5\n286\t208\t4\n293\t685\t3\n216\t144\t4\n166\t328\t5\n250\t496\t4\n271\t132\t5\n160\t174\t5\n265\t118\t4\n198\t498\t3\n42\t96\t5\n168\t151\t5\n110\t307\t4\n58\t144\t4\n90\t648\t4\n271\t346\t4\n62\t21\t3\n279\t832\t3\n237\t514\t4\n94\t789\t4\n128\t485\t3\n298\t317\t4\n44\t195\t5\n264\t200\t5\n194\t385\t2\n72\t195\t5\n222\t750\t5\n250\t264\t3\n41\t265\t3\n224\t245\t3\n82\t135\t3\n262\t1147\t4\n293\t471\t3\n216\t658\t3\n250\t140\t3\n59\t23\t5\n286\t379\t5\n244\t815\t4\n7\t479\t4\n174\t368\t1\n87\t274\t4\n194\t1211\t2\n82\t1134\t2\n13\t836\t2\n13\t272\t4\n244\t756\t2\n305\t427\t5\n95\t787\t2\n43\t14\t2\n299\t955\t4\n57\t419\t3\n84\t405\t3\n269\t504\t4\n299\t111\t3\n194\t466\t4\n160\t135\t4\n99\t268\t3\n10\t486\t4\n259\t117\t4\n85\t427\t3\n303\t919\t4\n213\t273\t5\n121\t514\t3\n90\t98\t5\n49\t559\t2\n42\t794\t3\n155\t323\t2\n68\t117\t4\n172\t177\t4\n19\t4\t4\n268\t231\t4\n5\t2\t3\n305\t117\t2\n44\t294\t4\n43\t137\t4\n279\t1336\t1\n80\t466\t5\n254\t164\t4\n298\t281\t3\n279\t1240\t1\n66\t298\t4\n18\t443\t3\n268\t1035\t2\n99\t79\t4\n13\t98\t4\n26\t258\t3\n7\t455\t4\n222\t755\t4\n200\t673\t5\n119\t328\t4\n213\t172\t5\n276\t322\t3\n94\t1217\t3\n130\t379\t4\n38\t328\t4\n160\t719\t3\n293\t1267\t3\n26\t930\t2\n130\t216\t4\n92\t1079\t3\n256\t452\t4\n1\t61\t4\n72\t48\t4\n56\t755\t3\n13\t360\t4\n15\t405\t2\n92\t77\t3\n207\t476\t2\n292\t174\t5\n232\t483\t5\n251\t748\t2\n224\t26\t3\n181\t220\t4\n259\t255\t4\n305\t471\t4\n52\t280\t3\n161\t202\t5\n148\t408\t5\n125\t235\t2\n97\t228\t5\n58\t1098\t4\n83\t234\t4\n90\t347\t4\n272\t178\t5\n194\t181\t3\n125\t478\t4\n110\t688\t1\n299\t14\t4\n151\t10\t5\n269\t127\t4\n6\t14\t5\n54\t106\t3\n303\t69\t5\n16\t944\t1\n301\t790\t4\n276\t1091\t3\n305\t214\t2\n194\t1028\t2\n91\t323\t2\n87\t554\t4\n294\t109\t4\n286\t171\t4\n200\t318\t5\n229\t328\t1\n178\t568\t4\n303\t842\t2\n62\t65\t4\n207\t591\t3\n92\t172\t4\n301\t401\t4\n36\t339\t5\n70\t746\t3\n63\t242\t3\n28\t201\t3\n279\t68\t4\n250\t7\t4\n14\t98\t3\n299\t1018\t3\n194\t54\t3\n303\t815\t3\n119\t237\t5\n295\t218\t5\n268\t930\t2\n268\t2\t2\n66\t258\t4\n233\t202\t5\n83\t623\t4\n214\t334\t3\n192\t476\t2\n100\t344\t4\n268\t145\t1\n301\t56\t4\n307\t89\t5\n234\t141\t3\n83\t576\t4\n181\t264\t2\n297\t133\t4\n38\t153\t5\n7\t382\t4\n264\t813\t4\n181\t872\t1\n201\t146\t1\n85\t507\t4\n269\t367\t3\n59\t468\t3\n286\t143\t4\n193\t96\t1\n113\t595\t5\n292\t11\t5\n130\t1014\t3\n275\t98\t4\n189\t520\t5\n219\t82\t1\n218\t209\t5\n123\t427\t3\n119\t222\t5\n158\t177\t4\n222\t118\t4\n302\t322\t2\n279\t501\t3\n301\t79\t5\n181\t3\t2\n201\t695\t1\n13\t198\t3\n1\t189\t3\n145\t237\t5\n23\t385\t4\n201\t767\t4\n296\t705\t5\n42\t546\t3\n33\t872\t3\n301\t554\t3\n16\t64\t5\n95\t135\t3\n154\t357\t4\n77\t484\t5\n296\t508\t5\n302\t303\t2\n244\t673\t3\n222\t77\t4\n13\t215\t5\n16\t705\t5\n270\t452\t4\n145\t15\t2\n187\t64\t5\n200\t304\t5\n170\t749\t5\n101\t829\t3\n184\t218\t3\n128\t204\t4\n181\t1295\t1\n184\t153\t3\n1\t33\t4\n1\t160\t4\n184\t321\t5\n54\t595\t3\n94\t343\t4\n128\t508\t4\n23\t323\t2\n301\t227\t3\n301\t191\t3\n112\t903\t1\n82\t183\t3\n222\t724\t3\n218\t430\t3\n308\t1197\t4\n303\t134\t5\n133\t751\t3\n215\t212\t2\n69\t256\t5\n254\t662\t4\n276\t2\t4\n104\t984\t1\n63\t1067\t3\n267\t410\t4\n13\t56\t5\n240\t879\t3\n286\t237\t2\n294\t271\t5\n90\t1086\t4\n18\t26\t4\n92\t229\t3\n308\t649\t4\n144\t89\t3\n191\t302\t4\n59\t951\t3\n200\t96\t5\n16\t197\t5\n61\t678\t3\n271\t199\t4\n271\t709\t3\n142\t169\t5\n275\t597\t3\n222\t151\t3\n87\t40\t3\n207\t258\t4\n272\t1393\t2\n177\t333\t4\n207\t1115\t2\n299\t577\t3\n271\t378\t4\n305\t425\t4\n49\t959\t2\n94\t1224\t3\n130\t1017\t3\n10\t175\t3\n203\t321\t3\n191\t286\t4\n43\t323\t3\n21\t558\t5\n197\t96\t5\n13\t344\t2\n194\t66\t3\n234\t206\t4\n308\t402\t4\n308\t640\t4\n269\t522\t5\n94\t265\t4\n268\t62\t3\n272\t12\t5\n121\t291\t3\n296\t20\t5\n134\t286\t3\n180\t462\t5\n234\t612\t3\n104\t117\t2\n38\t758\t1\n269\t845\t1\n7\t163\t4\n234\t1451\t3\n275\t405\t2\n52\t250\t3\n102\t823\t3\n13\t186\t4\n178\t731\t4\n236\t71\t3\n256\t781\t5\n263\t176\t5\n244\t186\t3\n279\t1181\t4\n43\t815\t4\n83\t78\t2\n151\t197\t5\n254\t436\t2\n109\t631\t3\n297\t716\t3\n249\t188\t4\n144\t699\t4\n301\t604\t4\n64\t392\t3\n92\t501\t2\n222\t97\t4\n268\t436\t3\n293\t135\t5\n213\t173\t5\n160\t460\t2\n13\t498\t4\n59\t715\t5\n5\t17\t4\n125\t163\t5\n174\t315\t5\n114\t505\t3\n213\t515\t4\n23\t196\t2\n128\t15\t4\n239\t56\t4\n181\t279\t1\n291\t80\t4\n250\t238\t4\n201\t649\t3\n60\t60\t5\n181\t325\t2\n119\t407\t3\n287\t1\t5\n216\t228\t3\n216\t531\t4\n203\t471\t4\n92\t587\t3\n13\t892\t3\n213\t176\t4\n286\t288\t5\n117\t1047\t2\n99\t111\t1\n11\t558\t3\n65\t47\t2\n295\t194\t4\n269\t217\t2\n85\t259\t2\n250\t596\t5\n137\t144\t5\n201\t960\t2\n257\t137\t4\n111\t328\t4\n91\t480\t4\n215\t211\t4\n181\t938\t1\n189\t1060\t5\n1\t20\t4\n303\t404\t4\n299\t305\t3\n187\t210\t4\n222\t278\t2\n214\t568\t4\n293\t770\t3\n285\t191\t4\n303\t252\t3\n96\t156\t4\n72\t1110\t3\n115\t1067\t4\n7\t430\t3\n116\t350\t3\n73\t480\t4\n269\t246\t5\n263\t419\t5\n70\t431\t3\n221\t475\t4\n72\t182\t5\n25\t357\t4\n290\t50\t5\n189\t526\t4\n299\t303\t3\n264\t294\t3\n200\t365\t5\n187\t135\t4\n184\t187\t4\n63\t289\t2\n13\t229\t4\n298\t486\t3\n235\t185\t4\n62\t712\t4\n246\t94\t2\n54\t742\t5\n63\t762\t3\n11\t732\t3\n92\t168\t4\n8\t550\t3\n307\t174\t4\n303\t200\t4\n256\t849\t2\n72\t54\t3\n164\t406\t2\n117\t150\t4\n224\t77\t4\n193\t869\t3\n94\t184\t2\n281\t338\t2\n130\t109\t3\n128\t371\t1\n94\t720\t1\n182\t845\t3\n129\t873\t1\n254\t229\t4\n64\t381\t4\n151\t176\t2\n45\t25\t4\n193\t879\t3\n276\t922\t4\n276\t57\t3\n234\t187\t4\n181\t306\t1\n21\t370\t1\n293\t249\t3\n264\t721\t5\n10\t611\t5\n197\t346\t3\n276\t142\t3\n308\t427\t4\n221\t943\t4\n131\t126\t4\n268\t824\t2\n109\t8\t3\n198\t58\t3\n230\t680\t4\n181\t741\t1\n192\t1061\t4\n234\t448\t3\n90\t900\t4\n193\t941\t4\n128\t603\t5\n126\t905\t2\n244\t265\t4\n90\t289\t3\n157\t25\t3\n305\t71\t3\n119\t382\t5\n21\t222\t2\n231\t181\t4\n280\t508\t3\n288\t132\t3\n279\t1497\t2\n301\t33\t4\n72\t699\t3\n90\t259\t2\n308\t55\t3\n59\t742\t3\n94\t744\t4\n130\t642\t4\n26\t1015\t3\n56\t121\t5\n82\t508\t2\n62\t12\t4\n276\t40\t3\n181\t1015\t1\n152\t301\t3\n178\t845\t4\n217\t597\t4\n79\t303\t4\n138\t484\t4\n308\t81\t5\n75\t284\t2\n269\t198\t4\n307\t94\t3\n222\t781\t3\n121\t740\t3\n269\t22\t1\n13\t864\t4\n230\t742\t5\n269\t507\t4\n239\t1099\t5\n245\t1028\t5\n56\t546\t3\n295\t961\t5\n271\t1028\t2\n222\t812\t2\n69\t240\t3\n10\t7\t4\n22\t376\t3\n294\t931\t3\n82\t717\t1\n279\t399\t4\n269\t234\t1\n6\t98\t5\n243\t1039\t4\n298\t181\t4\n282\t325\t1\n78\t323\t1\n118\t200\t5\n283\t1114\t5\n171\t292\t4\n70\t217\t4\n10\t100\t5\n245\t181\t4\n107\t333\t3\n246\t561\t1\n13\t901\t1\n276\t70\t4\n244\t17\t2\n189\t56\t5\n226\t242\t5\n62\t1016\t4\n276\t417\t4\n214\t478\t4\n306\t235\t4\n222\t26\t3\n280\t631\t5\n60\t430\t5\n56\t71\t4\n42\t274\t5\n1\t202\t5\n13\t809\t4\n173\t289\t4\n15\t749\t1\n185\t23\t4\n280\t540\t3\n244\t381\t4\n150\t293\t4\n7\t497\t4\n178\t317\t4\n178\t742\t3\n95\t1217\t3\n234\t1462\t3\n97\t222\t5\n109\t127\t2\n117\t268\t5\n269\t705\t2\n130\t1246\t3\n264\t655\t4\n207\t13\t3\n42\t588\t5\n246\t409\t2\n87\t367\t4\n101\t304\t3\n256\t127\t4\n92\t794\t3\n181\t762\t2\n213\t235\t1\n92\t739\t2\n292\t661\t5\n246\t665\t4\n274\t845\t5\n188\t692\t5\n18\t86\t4\n5\t439\t1\n236\t632\t3\n193\t407\t4\n144\t709\t4\n90\t1198\t5\n48\t609\t4\n5\t225\t2\n22\t128\t5\n311\t432\t4\n8\t22\t5\n276\t188\t4\n222\t173\t5\n72\t866\t4\n299\t134\t4\n1\t171\t5\n308\t295\t3\n165\t216\t4\n222\t49\t3\n181\t121\t4\n200\t11\t5\n234\t626\t4\n244\t707\t4\n90\t25\t5\n208\t216\t5\n263\t96\t4\n134\t323\t4\n279\t586\t4\n2\t292\t4\n288\t593\t2\n49\t302\t4\n286\t153\t5\n205\t304\t3\n22\t80\t4\n234\t318\t4\n223\t328\t3\n15\t25\t3\n268\t147\t4\n94\t1220\t3\n274\t405\t4\n7\t492\t5\n268\t217\t2\n16\t55\t5\n164\t620\t3\n290\t161\t4\n92\t515\t4\n239\t1070\t5\n56\t449\t5\n248\t234\t4\n234\t10\t3\n280\t1049\t2\n308\t187\t5\n276\t64\t5\n192\t948\t3\n122\t509\t4\n85\t588\t3\n262\t931\t2\n201\t272\t3\n181\t870\t2\n295\t739\t4\n263\t568\t4\n295\t39\t4\n201\t1100\t4\n93\t820\t3\n159\t1028\t5\n158\t665\t2\n293\t423\t3\n82\t597\t3\n276\t181\t5\n13\t823\t5\n217\t2\t3\n83\t660\t4\n189\t20\t5\n222\t796\t4\n146\t1022\t5\n267\t121\t3\n126\t294\t3\n181\t1060\t1\n125\t80\t4\n43\t120\t4\n13\t780\t1\n253\t259\t2\n42\t44\t3\n77\t518\t4\n291\t686\t5\n268\t21\t3\n262\t28\t3\n234\t81\t3\n29\t245\t3\n236\t57\t5\n158\t729\t3\n156\t661\t4\n232\t52\t5\n168\t866\t5\n37\t288\t4\n141\t245\t3\n235\t230\t4\n102\t70\t3\n77\t172\t3\n90\t506\t5\n186\t566\t5\n44\t660\t5\n118\t774\t5\n7\t661\t5\n49\t1003\t2\n62\t68\t1\n42\t1028\t4\n178\t433\t4\n85\t51\t2\n77\t474\t5\n58\t1099\t2\n56\t1047\t4\n197\t688\t1\n286\t99\t4\n90\t258\t3\n181\t1288\t1\n295\t190\t4\n224\t69\t4\n272\t317\t4\n221\t1010\t3\n66\t877\t1\n207\t318\t5\n234\t487\t3\n7\t648\t5\n87\t82\t5\n195\t1052\t1\n44\t449\t5\n306\t287\t4\n194\t172\t3\n94\t62\t3\n167\t659\t4\n108\t100\t4\n230\t304\t5\n181\t927\t1\n54\t302\t4\n90\t22\t4\n181\t696\t2\n286\t357\t4\n14\t269\t4\n311\t179\t2\n92\t121\t5\n21\t440\t1\n244\t550\t1\n181\t405\t4\n65\t806\t4\n37\t540\t2\n44\t443\t5\n244\t183\t4\n1\t265\t4\n270\t25\t5\n299\t387\t2\n94\t572\t3\n286\t746\t4\n239\t272\t5\n216\t55\t5\n254\t121\t3\n62\t665\t2\n178\t385\t4\n194\t23\t4\n268\t955\t3\n188\t143\t5\n276\t294\t4\n158\t1098\t4\n207\t845\t3\n161\t48\t1\n305\t654\t4\n47\t324\t3\n64\t736\t4\n191\t751\t3\n7\t378\t5\n59\t92\t5\n69\t268\t5\n10\t461\t3\n21\t129\t4\n58\t9\t4\n194\t152\t3\n7\t200\t5\n113\t126\t5\n173\t328\t5\n95\t233\t4\n16\t194\t5\n59\t323\t4\n311\t654\t3\n292\t589\t4\n43\t203\t4\n79\t50\t4\n235\t70\t5\n125\t190\t5\n284\t322\t3\n303\t161\t5\n254\t378\t3\n255\t1034\t1\n104\t301\t2\n90\t923\t5\n6\t463\t4\n279\t122\t1\n286\t298\t4\n222\t448\t3\n297\t57\t5\n42\t625\t3\n130\t1217\t4\n254\t357\t3\n109\t475\t1\n230\t1444\t2\n244\t310\t3\n6\t301\t2\n36\t748\t4\n256\t443\t3\n102\t515\t1\n104\t285\t4\n21\t447\t5\n111\t301\t4\n18\t408\t5\n25\t222\t4\n110\t944\t3\n270\t98\t5\n68\t237\t5\n83\t215\t4\n6\t258\t2\n89\t216\t5\n128\t317\t4\n305\t512\t4\n184\t412\t2\n286\t175\t5\n279\t1428\t3\n256\t86\t5\n221\t48\t5\n140\t332\t3\n190\t977\t2\n11\t227\t3\n201\t203\t5\n150\t181\t5\n126\t245\t3\n20\t208\t2\n144\t742\t4\n181\t930\t1\n109\t566\t4\n85\t1065\t3\n213\t133\t3\n222\t379\t1\n223\t11\t3\n215\t421\t4\n218\t208\t3\n174\t937\t5\n275\t186\t3\n68\t742\t1\n268\t583\t4\n160\t462\t4\n195\t273\t4\n224\t178\t4\n5\t110\t1\n99\t1016\t5\n2\t251\t5\n292\t9\t4\n72\t568\t4\n85\t228\t3\n83\t281\t5\n92\t831\t2\n7\t543\t3\n87\t401\t2\n287\t926\t4\n1\t155\t2\n234\t632\t2\n222\t53\t5\n24\t64\t5\n7\t554\t3\n82\t56\t3\n161\t318\t3\n196\t393\t4\n56\t91\t4\n82\t477\t3\n7\t472\t2\n256\t761\t4\n226\t56\t4\n279\t741\t5\n308\t1286\t3\n16\t8\t5\n180\t202\t3\n203\t93\t4\n145\t56\t5\n288\t305\t4\n84\t742\t3\n44\t644\t3\n17\t13\t3\n313\t117\t4\n148\t1\t4\n197\t347\t4\n21\t164\t5\n279\t982\t3\n239\t491\t5\n185\t287\t5\n297\t89\t4\n303\t68\t4\n186\t250\t1\n73\t206\t3\n104\t756\t2\n94\t216\t3\n239\t194\t5\n197\t511\t5\n280\t1\t4\n1\t117\t3\n224\t583\t1\n303\t397\t1\n60\t162\t4\n198\t258\t4\n239\t513\t5\n6\t69\t3\n233\t375\t4\n85\t642\t4\n110\t38\t3\n184\t522\t3\n99\t873\t1\n13\t418\t2\n201\t518\t4\n13\t858\t1\n214\t131\t3\n296\t228\t4\n222\t87\t3\n279\t725\t4\n217\t182\t2\n85\t433\t3\n239\t234\t3\n13\t72\t4\n194\t77\t3\n208\t663\t5\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514300033734_1401266404",
      "id": "20171226-145353_359444679",
      "dateCreated": "Dec 26, 2017 2:53:53 PM",
      "dateStarted": "Dec 26, 2017 2:54:46 PM",
      "dateFinished": "Dec 26, 2017 2:54:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nNow, we\u0027ll group everythin by movie ID, and compute the total number of ratings (each movie\u0027s popularity) and the average raring for every movie:\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 2:55:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow, we\u0026rsquo;ll group everythin by movie ID, and compute the total number of ratings (each movie\u0026rsquo;s popularity) and the average raring for every movie:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514300081545_1990594450",
      "id": "20171226-145441_1663115236",
      "dateCreated": "Dec 26, 2017 2:54:41 PM",
      "dateStarted": "Dec 26, 2017 2:55:34 PM",
      "dateFinished": "Dec 26, 2017 2:55:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nimport numpy as np\n\nmovieProperties \u003d ratings.groupby(\u0027movie_id\u0027).agg({\u0027rating\u0027: [np.size, np.mean]})\nmovieProperties.head(10)\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 2:57:40 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "         rating          \n           size      mean\nmovie_id                 \n1           452  3.878319\n2           131  3.206107\n3            90  3.033333\n4           209  3.550239\n5            86  3.302326\n6            26  3.576923\n7           392  3.798469\n8           219  3.995434\n9           299  3.896321\n10           89  3.831461\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514300134227_858540592",
      "id": "20171226-145534_203555081",
      "dateCreated": "Dec 26, 2017 2:55:34 PM",
      "dateStarted": "Dec 26, 2017 2:57:40 PM",
      "dateFinished": "Dec 26, 2017 2:57:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe raw number of ratings isn\u0027t very useful for computing distances between movies, so we\u0027ll create a new DataFrame that contains the normalized numbers of ratings. So, a value of 0 means nobody rateit, and a value of 1 will mean it\u0027s the most popular movie there is.\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:02:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe raw number of ratings isn\u0026rsquo;t very useful for computing distances between movies, so we\u0026rsquo;ll create a new DataFrame that contains the normalized numbers of ratings. So, a value of 0 means nobody rateit, and a value of 1 will mean it\u0026rsquo;s the most popular movie there is.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514300219636_-2004437270",
      "id": "20171226-145659_297506091",
      "dateCreated": "Dec 26, 2017 2:56:59 PM",
      "dateStarted": "Dec 26, 2017 3:02:52 PM",
      "dateFinished": "Dec 26, 2017 3:02:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\n# This will just extract the column size from the aggregated DF, it will contain then, for every movie_id, the corresponding size i.e. the amount of ratings it got\nmovieNumRatings \u003d pd.DataFrame(movieProperties[\u0027rating\u0027][\u0027size\u0027])\n# This will affect the size column applying the given function here to normalize the size (Need to check for normalization techniques)\nmovieNormalizedNumRatings \u003d movieNumRatings.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))\nmovieNormalizedNumRatings",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:07:20 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "              size\nmovie_id          \n1         0.773585\n2         0.222985\n3         0.152659\n4         0.356775\n5         0.145798\n6         0.042882\n7         0.670669\n8         0.373928\n9         0.511149\n10        0.150943\n11        0.403087\n12        0.456261\n13        0.313894\n14        0.312178\n15        0.500858\n16        0.065180\n17        0.156089\n18        0.015437\n19        0.116638\n20        0.121784\n21        0.142367\n22        0.507719\n23        0.310463\n24        0.296741\n25        0.500858\n26        0.123499\n27        0.096055\n28        0.471698\n29        0.193825\n30        0.061750\n...            ...\n1653      0.000000\n1654      0.000000\n1655      0.000000\n1656      0.001715\n1657      0.000000\n1658      0.003431\n1659      0.000000\n1660      0.000000\n1661      0.000000\n1662      0.001715\n1663      0.000000\n1664      0.005146\n1665      0.000000\n1666      0.000000\n1667      0.000000\n1668      0.000000\n1669      0.000000\n1670      0.000000\n1671      0.000000\n1672      0.001715\n1673      0.000000\n1674      0.000000\n1675      0.000000\n1676      0.000000\n1677      0.000000\n1678      0.000000\n1679      0.000000\n1680      0.000000\n1681      0.000000\n1682      0.000000\n\n[1682 rows x 1 columns]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514300572665_2023587621",
      "id": "20171226-150252_957833377",
      "dateCreated": "Dec 26, 2017 3:02:52 PM",
      "dateStarted": "Dec 26, 2017 3:07:20 PM",
      "dateFinished": "Dec 26, 2017 3:07:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow, let\u0027s get the genre information from the u.item file. The way this works is there are 19 fields, each corresponding to a specific genre - a value of \u00270\u0027 means it is not in that genre, and \u00271\u0027 means it is in that genre. A movie may have more than one genre associated with it.\n\nWhile we\u0027re at it, we\u0027ll put togheter everythin into one big python dictionary called movieDict. Each entry will contain the movie name, list of genre values, the normalized popularity score, and the average rating for each movie",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:10:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow, let\u0026rsquo;s get the genre information from the u.item file. The way this works is there are 19 fields, each corresponding to a specific genre - a value of \u0026lsquo;0\u0026rsquo; means it is not in that genre, and \u0026lsquo;1\u0026rsquo; means it is in that genre. A movie may have more than one genre associated with it.\u003c/p\u003e\n\u003cp\u003eWhile we\u0026rsquo;re at it, we\u0026rsquo;ll put togheter everythin into one big python dictionary called movieDict. Each entry will contain the movie name, list of genre values, the normalized popularity score, and the average rating for each movie\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514300621040_394237326",
      "id": "20171226-150341_1427345163",
      "dateCreated": "Dec 26, 2017 3:03:41 PM",
      "dateStarted": "Dec 26, 2017 3:10:14 PM",
      "dateFinished": "Dec 26, 2017 3:10:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nmovieDict \u003d {}\n\nwith open(r\u0027/zeppelin/datasets/ml-100k/u.item2\u0027) as f:\n    temp \u003d \u0027\u0027\n    for line in f:\n        fields \u003d line.rstrip(\u0027\\n\u0027).split(\u0027|\u0027)\n        movieID \u003d int(fields[0])\n        name \u003d fields[1]\n        genres \u003d fields[5:25]\n        genres \u003d map(int, genres)\n        movieDict[movieID] \u003d (name, genres, movieNormalizedNumRatings.loc[movieID].get(\u0027size\u0027), movieProperties.loc[movieID].rating.get(\u0027mean\u0027))\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:19:12 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1514301014255_1493648824",
      "id": "20171226-151014_2005303162",
      "dateCreated": "Dec 26, 2017 3:10:14 PM",
      "dateStarted": "Dec 26, 2017 3:19:12 PM",
      "dateFinished": "Dec 26, 2017 3:19:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nFor example, here\u0027s the record we end up with for movieID 1, \"Toy Story\":",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:19:49 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eFor example, here\u0026rsquo;s the record we end up with for movieID 1, \u0026ldquo;Toy Story\u0026rdquo;:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514301552891_1434535934",
      "id": "20171226-151912_662476012",
      "dateCreated": "Dec 26, 2017 3:19:12 PM",
      "dateStarted": "Dec 26, 2017 3:19:49 PM",
      "dateFinished": "Dec 26, 2017 3:19:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nmovieDict[1]\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:20:03 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(\u0027Toy Story (1995)\u0027, [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.77358490566037741, 3.8783185840707963)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514301589418_-948001110",
      "id": "20171226-151949_2113189663",
      "dateCreated": "Dec 26, 2017 3:19:49 PM",
      "dateStarted": "Dec 26, 2017 3:20:03 PM",
      "dateFinished": "Dec 26, 2017 3:20:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nNow let\u0027s define that computes the \"distance\" between two movies based on how similar their genres are, and how similar their popularity is. Just to make sure it works, we\u0027ll compute the distance between movie ID\u0027s 2 and 4:\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:22:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow let\u0026rsquo;s define that computes the \u0026ldquo;distance\u0026rdquo; between two movies based on how similar their genres are, and how similar their popularity is. Just to make sure it works, we\u0026rsquo;ll compute the distance between movie ID\u0026rsquo;s 2 and 4:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514301603477_-1815609880",
      "id": "20171226-152003_1125961302",
      "dateCreated": "Dec 26, 2017 3:20:03 PM",
      "dateStarted": "Dec 26, 2017 3:22:15 PM",
      "dateFinished": "Dec 26, 2017 3:22:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\nfrom scipy import spatial\n\ndef ComputeDistance(a, b):\n    genresA \u003d a[1]\n    genresB \u003d b[1]\n    genreDistance \u003d spatial.distance.cosine(genresA, genresB)\n    popularityA \u003d a[2]\n    popularityB \u003d b[2]\n    popularityDistance \u003d abs(popularityA - popularityB)\n    return genreDistance + popularityDistance\n    \nComputeDistance(movieDict[2], movieDict[4])\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:24:35 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0.80045740423098921\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514301735699_594303989",
      "id": "20171226-152215_1064589579",
      "dateCreated": "Dec 26, 2017 3:22:15 PM",
      "dateStarted": "Dec 26, 2017 3:24:35 PM",
      "dateFinished": "Dec 26, 2017 3:24:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nRemember the higher the distance, the less similar the movies are. Let\u0027s check what movies 2 and 4 actually are - and configmr they\u0027re not really all that similar:\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:27:32 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eRemember the higher the distance, the less similar the movies are. Let\u0026rsquo;s check what movies 2 and 4 actually are - and configmr they\u0026rsquo;re not really all that similar:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514301875519_557919765",
      "id": "20171226-152435_732508129",
      "dateCreated": "Dec 26, 2017 3:24:35 PM",
      "dateStarted": "Dec 26, 2017 3:27:32 PM",
      "dateFinished": "Dec 26, 2017 3:27:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "print movieDict[2]\nprint movieDict[4]",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:27:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(\u0027GoldenEye (1995)\u0027, [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], 0.22298456260720412, 3.2061068702290076)\n(\u0027Get Shorty (1995)\u0027, [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.35677530017152659, 3.5502392344497609)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302052572_-1840157189",
      "id": "20171226-152732_821886124",
      "dateCreated": "Dec 26, 2017 3:27:32 PM",
      "dateStarted": "Dec 26, 2017 3:27:51 PM",
      "dateFinished": "Dec 26, 2017 3:27:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow, we just need a little code to compute the distance between some given test movie (Toy Story, in this example) and all of the movies in our data set. When the sort those by distance, and print out the K nearest neighbors",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:29:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow, we just need a little code to compute the distance between some given test movie (Toy Story, in this example) and all of the movies in our data set. When the sort those by distance, and print out the K nearest neighbors\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302071644_-922485089",
      "id": "20171226-152751_1729101993",
      "dateCreated": "Dec 26, 2017 3:27:51 PM",
      "dateStarted": "Dec 26, 2017 3:29:02 PM",
      "dateFinished": "Dec 26, 2017 3:29:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import operator\n\ndef getNeighbors(movieID, K):\n    distances \u003d []\n    for movie in movieDict:\n        if (movie !\u003d movieID):\n            dist \u003d ComputeDistance(movieDict[movieID], movieDict[movie])\n            distances.append((movie, dist))\n    distances.sort(key\u003doperator.itemgetter(1))\n    neighbors \u003d []\n    for x in range(K):\n        neighbors.append(distances[x][0])\n    return neighbors\n\nK \u003d 10\navgRating \u003d 0\nneighbors \u003d getNeighbors(1, K)\nfor neighbor in neighbors:\n    avgRating +\u003d movieDict[neighbor][3]\n    print (movieDict[neighbor][0] + \" \" + str(movieDict[neighbor][3]))\n    \navgRating /\u003d K\n\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:38:49 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Liar Liar (1997) 3.15670103093\nAladdin (1992) 3.81278538813\nWilly Wonka and the Chocolate Factory (1971) 3.63190184049\nMonty Python and the Holy Grail (1974) 4.0664556962\nFull Monty, The (1997) 3.92698412698\nGeorge of the Jungle (1997) 2.68518518519\nBeavis and Butt-head Do America (1996) 2.78846153846\nBirdcage, The (1996) 3.44368600683\nHome Alone (1990) 3.08759124088\nAladdin and the King of Thieves (1996) 2.84615384615\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302142564_536923328",
      "id": "20171226-152902_1798100882",
      "dateCreated": "Dec 26, 2017 3:29:02 PM",
      "dateStarted": "Dec 26, 2017 3:38:49 PM",
      "dateFinished": "Dec 26, 2017 3:38:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWhile we were at it, we computed the average rating of the 10 nearest neighbors to Toy Story:",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:39:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWhile we were at it, we computed the average rating of the 10 nearest neighbors to Toy Story:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302666210_-350741646",
      "id": "20171226-153746_1686449268",
      "dateCreated": "Dec 26, 2017 3:37:46 PM",
      "dateStarted": "Dec 26, 2017 3:39:15 PM",
      "dateFinished": "Dec 26, 2017 3:39:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "avgRating\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:39:31 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "3.3445905900235564\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302755449_1465043300",
      "id": "20171226-153915_1256372134",
      "dateCreated": "Dec 26, 2017 3:39:15 PM",
      "dateStarted": "Dec 26, 2017 3:39:31 PM",
      "dateFinished": "Dec 26, 2017 3:39:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nHow does this compare to Toy Story\u0027s actual average rating?",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:39:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eHow does this compare to Toy Story\u0026rsquo;s actual average rating?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302771571_-244380739",
      "id": "20171226-153931_892280939",
      "dateCreated": "Dec 26, 2017 3:39:31 PM",
      "dateStarted": "Dec 26, 2017 3:39:51 PM",
      "dateFinished": "Dec 26, 2017 3:39:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "movieDict[1]\n",
      "user": "anonymous",
      "dateUpdated": "Dec 26, 2017 3:40:08 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(\u0027Toy Story (1995)\u0027, [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.77358490566037741, 3.8783185840707963)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1514302791133_-1802983209",
      "id": "20171226-153951_914592778",
      "dateCreated": "Dec 26, 2017 3:39:51 PM",
      "dateStarted": "Dec 26, 2017 3:40:08 PM",
      "dateFinished": "Dec 26, 2017 3:40:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1514302808459_-1432607936",
      "id": "20171226-154008_1278241700",
      "dateCreated": "Dec 26, 2017 3:40:08 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Playground/KNN",
  "id": "2D35PWSUG",
  "angularObjects": {
    "2D1W49ZWX:shared_process": [],
    "2D4X3NNPH:shared_process": [],
    "2D1X3YQ1E:shared_process": [],
    "2D3ASQZ8V:shared_process": [],
    "2D3PJSFKR:shared_process": [],
    "2D52USXWJ:shared_process": [],
    "2D46VHZ3A:shared_process": [],
    "2D1AHZZ7N:shared_process": [],
    "2D35ZQ78M:shared_process": [],
    "2D2688N2K:shared_process": [],
    "2D4F9AE5S:shared_process": [],
    "2D3RCRCD1:shared_process": [],
    "2D35UG7N2:shared_process": [],
    "2D28799K8:shared_process": [],
    "2D3UUQ37U:shared_process": [],
    "2D2W5XS4Z:shared_process": [],
    "2D2CYTTTU:shared_process": [],
    "2D4J111UK:shared_process": [],
    "2D1AMAGTQ:shared_process": []
  },
  "config": {},
  "info": {}
}